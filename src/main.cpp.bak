// This example code is in the Public Domain (or CC0 licensed, at your option.)
// By Victor Tchistiak - 2019
//
// This example demonstrates master mode Bluetooth connection to a slave BT device
// defined either by String "slaveName" by default "ESP32-BT-Slave" or by MAC address
//
// This example creates a bridge between Serial and Classical Bluetooth (SPP)
// This is an extension of the SerialToSerialBT example by Evandro Copercini - 2018
//
// DO NOT try to connect to phone or laptop - they are master
// devices, same as the ESP using this code - you will be able
// to pair, but the serial communication will NOT work!
//
// You can try to flash a second ESP32 with the example SerialToSerialBT - it should
// automatically pair with ESP32 running this code
// Note: Pairing is authenticated automatically by this device

#include "BluetoothSerial.h"

// Check if Bluetooth is available
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
  #error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

// Check Serial Port Profile
#if !defined(CONFIG_BT_SPP_ENABLED)
  #error Serial Port Profile for Bluetooth is not available or not enabled. It is only available for the ESP32 chip.
#endif

//#define USE_NAME // Comment this to use MAC address instead of a slaveName

#ifdef USE_NAME
  const char *pin = "1234";
  String slaveName = "BMS-ANT24S-666"; // Change this to reflect the real name of your slave BT device
#else
  const char *pin = "1234";
  String MACadd = "AA:BB:CC:D0:06:66"; // This only for printing
  uint8_t address[6]  = {0xAA, 0xBB, 0xCC, 0xD0, 0x06, 0x66}; // Change this to reflect real MAC address of your slave BT device
#endif

BluetoothSerial SerialBT;

String myName = "ESP32-BT-Master1";

void setup() 
{
  bool connected = false;
  Serial.begin(115200);

  bool isPinOk = false;
  isPinOk = SerialBT.setPin(pin, 4);  
  Serial.printf("PIN was set: %s\n", isPinOk ? "OK" : "ERROR");
  

  SerialBT.begin(myName, true);
  //SerialBT.deleteAllBondedDevices(); // Uncomment this to delete paired devices; Must be called after begin
  Serial.printf("The device \"%s\" started in master mode, make sure slave BT device is on!\n", myName.c_str());

  Serial.println("Start connecting ...");

  #ifndef USE_NAME
    isPinOk = SerialBT.setPin(pin, 4);  
      Serial.printf("PIN was set: %s\n", isPinOk ? "OK" : "ERROR");

    Serial.println("Using PIN"); 
  #endif


  // connect(address) is fast (up to 10 secs max), connect(slaveName) is slow (up to 30 secs max) as it needs
  // to resolve slaveName to address first, but it allows to connect to different devices with the same name.
  // Set CoreDebugLevel to Info to view devices Bluetooth address and device names
  #ifdef USE_NAME
    connected = SerialBT.connect(slaveName);
    Serial.printf("Connecting to slave BT device named \"%s\"\n", slaveName.c_str());
  #else
    connected = SerialBT.connect(address);
    Serial.print("Connecting to slave BT device with MAC "); Serial.println(MACadd);
  #endif

  if (connected) {
    Serial.println("Connected Successfully!");
  } else {
    while(!SerialBT.connected(10000)) {
      Serial.println("Failed to initial connect. Make sure remote device is available and in range, then restart app.");
    }
  }

  /*
  // Disconnect() may take up to 10 secs max
  if (SerialBT.disconnect()) {
    Serial.println("Disconnected Successfully!");
  }
  // This would reconnect to the slaveName(will use address, if resolved) or address used with connect(slaveName/address).
  SerialBT.connect();
  if (connected) {
    Serial.println("Reconnected Successfully!");
  } else {
    while(!SerialBT.connected(10000)) {
      Serial.println("Failed to reconnect. Make sure remote device is available and in range, then restart app.");
    }
  }*/
} // end setup()

const uint8_t REQUEST_DATA[] = {0xDB, 0xDB, 0x00, 0x00, 0x00, 0x00};
uint8_t buffer[512];

void writeBlockBT(const uint8_t* buf, int size)
{
  for (int i=0; i<size; ++i)
  {
    SerialBT.write(buf[i]);
  }
  SerialBT.flush();
}

int readBlockBT(uint8_t *buffer)
{
  int size = 0;
  while (SerialBT.available()) 
  {
    buffer[size++] = SerialBT.read();
    delay(1);
  }
  return size;
}

void loop() 
{
  delay(10000);
  // empty receive buffer
  while(SerialBT.available())
    SerialBT.read();

  writeBlockBT(REQUEST_DATA, 6);
  SerialBT.flush();
  delay(100);
  int i = readBlockBT(buffer);

  Serial.printf("Received %d bytes.\n", i);
  if (i == 140) 
    Serial.printf("0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x\n", buffer[0], buffer[1],buffer[2],buffer[3],buffer[4], buffer[5]);
  
  if (Serial.available()) {
    SerialBT.write(Serial.read());
  }
  delay(500);
}
